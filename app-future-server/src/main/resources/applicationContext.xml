<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation=" 
          http://www.springframework.org/schema/beans 
          http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
          http://www.springframework.org/schema/tx 
          http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
          http://www.springframework.org/schema/context 
          http://www.springframework.org/schema/context/spring-context-3.0.xsd 
          http://www.springframework.org/schema/aop 
          http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
          http://www.springframework.org/schema/mvc 
          http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd"
          >

   <bean id="sysConfig" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="ignoreResourceNotFound" value="true"/>
		<property name="locations">
        	<value>classpath:sysConfig.properties</value>
		</property>
    </bean> 
    	<!-- configure file import-->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="ignoreResourceNotFound" value="true"></property>
		<property name="locations">
			<list>
				<value>classpath:sysConfig.properties</value>
			</list>
		</property>
	</bean>

	<!-- datasource defined -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${db.connection.driver_class}" />
		<property name="jdbcUrl" value="${db.connection.url}" />
		<property name="user" value="${db.connection.username}" />
		<property name="password" value="${db.connection.password}" />
		<property name="maxPoolSize" value="${c3p0.max_size}" />
		<property name="minPoolSize" value="${c3p0.min_size}" />
		<property name="initialPoolSize" value="${c3p0.initial_size}" />
		<property name="maxIdleTime" value="${c3p0.timeout}" />
		<property name="maxStatements" value="${c3p0.max_statements}" />
		<property name="checkoutTimeout" value="${c3p0.checkoutTimeout}" />
		<property name="acquireIncrement" value="${c3p0.acquire_increment}" />
		<property name="acquireRetryAttempts" value="${c3p0.acquireRetryAttempts}" />
		<property name="acquireRetryDelay" value="${c3p0.acquireRetryDelay}" />
		<property name="idleConnectionTestPeriod" value="${c3p0.idle_test_period}" />
	</bean>

	<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 配置别名用 -->
<!-- 		<property name="configLocation" value="classpath:mybatis-config.xml"></property> -->
		<!-- 当接口名与xml名相同时可省略此配置 -->
		<!--<property name="mapperLocations" value="classpath:com/*/*Mapper.xml" />-->
	</bean>
	
	<!-- 由Spring来管理事务 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 使用annotation注解方式配置事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- 扫描所有mapper,在本目录中新增的Mapper不再需要配置配置文件 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!--basePackage指定要扫描的包，在此包之下的映射器都会被
				搜索到。可指定多个包，包与包之间用逗号或分号分隔-->
		<property name="basePackage" value="com.dao"></property>
	</bean>
		<!-- 自动扫描service包完成注解装配 --> 
	<context:component-scan base-package="com.services"/>
	<context:component-scan base-package="com.biz"/>
	
		<!-- 自动扫描util包 -->   
	<context:component-scan base-package="com.utils"/>
	
	<!-- 当配为poxy-target-class="true"时，表示使用CGLib动态代理技术织入增强 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />
	
 <!-- ===================== 单点登录 start... ====================== -->
 <!-- 
    <bean id="serverName" class="java.lang.String">
		<constructor-arg value="${sso.client.serverName}"></constructor-arg>
	</bean>
	<bean id="casServer" class="java.lang.String">
		<constructor-arg value="${sso.client.casServer}"/>
	</bean>
	<bean id="casServerLoginUrl" class="java.lang.String">
		<constructor-arg value="${sso.client.casServerLoginUrl}"/>
	</bean>
	<bean id="casServerLogoutUrl" class="java.lang.String">
		<constructor-arg value="${sso.client.casServerLogoutUrl}"/>
	</bean>	
		
	<bean name="authenticationFilter"
	    class="org.jasig.cas.client.authentication.AuthenticationFilter"
	    p:casServerLoginUrl-ref="casServerLoginUrl"
	    p:serverName-ref="serverName" />
	    
	<bean name="ticketValidationFilter"
	    class="org.jasig.cas.client.validation.Cas20ProxyReceivingTicketValidationFilter"
	    p:redirectAfterValidation="true"
	    p:serverName-ref="serverName">
	    <property name="ticketValidator">
	        <bean class="org.jasig.cas.client.validation.Cas20ServiceTicketValidator">
	            <constructor-arg index="0" ref="casServer"/>
	        </bean>
	    </property>
	</bean>
	
	-->
	<!-- ===================== 单点登录 end====================== -->
	
	
</beans>